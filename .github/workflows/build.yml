# .github/workflows/build.yml
name: qik Go Build and Test Matrix

on:
  push:
    branches: ["main", "master", "develop", "feat/**"]
  pull_request:
    branches: ["main", "master", "develop"]

jobs:
  build-and-test:
    name: Build and Test (${{ matrix.goos }}-${{ matrix.arch }})
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - goos: linux
            arch: amd64
          - goos: linux
            arch: arm64
          - goos: darwin
            arch: amd64
          - goos: darwin
            arch: arm64
          - goos: windows
            arch: amd64
    # No need to define CACHE_PROJECT_NAME at job level if we simplify paths

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version-file: 'go.mod'
        cache: true # Enable caching within setup-go for go modules (GOMODCACHE)
        # cache-dependency-path: "**/go.sum" # Usually implied, but can be explicit

    # The build cache (GOCACHE) is often handled differently or might not need
    # explicit cross-job caching as much as GOMODCACHE if builds are fast.
    # However, if you want to cache GOCACHE too:
    - name: Cache Go build cache (GOCACHE)
      uses: actions/cache@v4
      with:
        # Path to Go's build cache. This path might vary slightly depending on the OS
        # and how setup-go configures it. A common default on Linux is ~/.cache/go-build
        # On Windows, it's often %LocalAppData%\go-build
        # We can use an action to get the default path.
        # For simplicity here, we'll assume setup-go places it relative to HOME or a known path.
        # A more robust way is to use `go env GOCACHE` to find the path.
        # Let's try caching the default location determined by Go:
        path: |
          ~/.cache/go-build # Linux/macOS default
          %LocalAppData%/go-build # Windows default (syntax for 'path' might need adjustment for Windows)
          # For cross-OS compatibility, it's often better to capture `go env GOCACHE`
        key: gocache-${{ runner.os }}-${{ matrix.goos }}-${{ matrix.arch }}-${{ hashFiles('**/go.sum') }} # Include go.sum as changes might invalidate build cache
        restore-keys: |
          gocache-${{ runner.os }}-${{ matrix.goos }}-${{ matrix.arch }}-

    - name: Build and Test (${{ matrix.goos }}-${{ matrix.arch }})
      id: build_step
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.arch }}
        CGO_ENABLED: 0
        # GOMODCACHE and GOCACHE are typically set by 'setup-go' or default to user-writable locations.
        # No need to manually set them to custom paths here if setup-go's caching is used for modules.
      run: |
        set -euo pipefail

        PROJECT_NAME="qik"

        echo "Go environment:"
        go version
        go env GOMODCACHE
        go env GOCACHE

        echo "Running go vet..."
        go vet ./...

        echo "Running go test..."
        go test -v ./... # Decide if '|| true' is needed

        EXT=""
        if [ "$GOOS" = "windows" ]; then EXT=".exe"; fi
        BIN_FILENAME="${PROJECT_NAME}${EXT}"

        echo "Building $PROJECT_NAME for $GOOS/$GOARCH..."
        go build -v -ldflags="-s -w" -o "$BIN_FILENAME" .

        DIST_DIR="dist-${GOOS}-${GOARCH}"
        mkdir -p "$DIST_DIR"
        mv "$BIN_FILENAME" "$DIST_DIR/"

        echo "dist_path=${DIST_DIR}" >> "$GITHUB_OUTPUT"

    - name: Upload build artifact (${{ matrix.goos }}-${{ matrix.arch }})
      if: success()
      uses: actions/upload-artifact@v4
      with:
        name: qik-${{ matrix.goos }}-${{ matrix.arch }}
        path: ${{ steps.build_step.outputs.dist_path }}
        if-no-files-found: error
        retention-days: 7
